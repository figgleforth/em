After much trouble trying to parse conditional if `xyz {}` vs `member {}` vs `{ dict_key }', I now know there's too much ambiguity here. I need to redesign this syntax so each construct is easily identifiable by its tokens. That would really make it a lot easier to parse.
So what's more important? member {} or if xyz {}?
I could make arrows mandatory for functions, so then they cannot be confused with the conditional braces since those will not have the arrow
But then what about dictionaries? { x=1 } is valid, but it's with the -> requirement it won't ever be confused for a block.
if abc {
	x = 1
}
The only ambiguity remaining is that {x=1} could be a dictionary. If I make dictionary only work with colon, then this should be fine? Possibly?
if abc {
	x: 1
} # I find it hard to believe this would ever happen. It would have to be some kind of syntax error in this case.
Or what if I make dictionaries require %d{}? That might be overkill, I might hate working with dictionaries then
Find todo 'syntax rewrite' for places that need to be updated
- #make_ast currently lump ident { and ident = together. those need to be separate.

Interpreting issue when calling .member on a Class_Construct. I think to fix this, parse for class methods [self, '.', identifier ... func] and add those to the scope
Abc { what { 123 }}.what
◼︎ undefined variable or function `what` in Abc scope
Abc { what { 123 }}.new.what
◼︎ 123

Figure out Class_Construct. How is that used to initialize an instance? See Interpreter#evaluate when Class_Expr

Two identifier expressions are valid syntax. For example, `ab = 12 cd = 34` evaluates to 12. This might involve lexing whitespace again? I'm not really sure

Interpreter issue: Looks like params are not declared in the scope of the block
x { in -> in }
◼︎ #<Block_Construct:0x0000000103f2c110>
x()
◼︎ undefined variable or function `in` in  scope

Compositions and args/params at Interpreter#evaluate when Block_Expr

Interpreter class is becoming very messy. Cleanup.

Scope depth when reaches the 70s. Is that wrong? It feels wrong. That means I'm constantly pushing scope, but not popping? I wonder if it has something to do with how I'm currently re-evaluating the expression that was used as an argument. So Boo.new is evaluated, then during composition it's expression is re-evaluated to add its guts to the current scope.
Here's the example program
Boo { scary = true }
moo { boo -> boo.scary }
moo(Boo.new)
moo_with_comp { &boo_param -> scary }
moo_with_comp(Boo.new)
^ this turned out to be the number of scopes instantiated, rather than actual depth. I made #push_scope set the depth to number of scopes + 1

Make functions not callable without (). I originally wanted them to be, but I changed my mind for one reason – you cannot pass blocks around in variables since `greet` evaluates the block.
greet {->}
◼︎ #<Block_Construct:0x0000000103658660>
greet
◼︎

The double reversing of @scopes in Interpreter#get_construct is probably inefficient, so maybe just get the index of current scope and use it to traverse up the scope stack in the reverse order?

Consider combining scope.variables and scope.functions and scope.classes into scope.declarations. That would allow simplification of Scope, it could become just a dictionary. This should be done AFTER signature is implemented because if it's just one dictionary, it will need signatures to allow var x and func x to coexist.
Update: see notes/scopes.txt where I go into detail on how I think scopes should work. It is actually just a single dictionary.

Implement dot access for dictionaries, and for enums

Rethink how CONSTANTS are stored. Would it make sense for them to extend Assignment_Expr? Right now they're their own construct Enum_Constant_Expr and Enum_Collection_Expr. At least the Enum_Constant_Expr could be Assignment_Expr, especially once (may already be in place) Exprs are getting Tokens instead of just plain strings, we can then check token#constant? instead of needing a class to represent it

Updated Parser so that it returns a Binary_Expr instead of Subscript_Expr

Runtime replaces all Block_Exprs with References. Since Blocks are going to be used often, they should be stored once and shared. Class_Expr on the other hand is transformed into a different Hash and Class_Expr deleted.
In any case, I don't want to do the same thing with Class_Expr because there could be nested classes which would be obscured by the Reference. I guess the same could be said about Blocks, but I don't care if there are nested blocks, those can be recreated at runtime.

New idea – Peek into scope
String {
}
cd String
# pushes String scope, pushes empty Block scope
sponge! { -> } # converts to sponge case
"hello".sponge! # "HeLlO"
cd .. # pops String scope. Should not do anything if there wasn't anything manually pushed.
"hello".sponge! # undefined sponge!
Anyway, this needs to be a new Scope subclass. Peek or Transient, or whatever. It needs its own class because when setting values inside a Peek, I don't want to overwrite what's in peek. I also don't want to just store it in the temporary Peek scope. I want to assign a variable that I was using before the Peek. So then #set can just ignore Peek/Transient scopes when setting. Problem solved.
