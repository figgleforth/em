STATE {
	ABC = 42
	XYZ {}
}

Enum_Collection_Expr(
	name="STATE"
	constants=[
		Assignment_Expr(name="ABC", expression=Number_Literal_Expr(42)),
		Enum_Collection_Expr(constants=[], name="XYZ")
	]
)

dictionaries are stored like
#<Variable_Construct:0x00000001072386a8
   @expression=#<Dictionary_Literal_Expr:0x000000010723ceb0 @keys=["x"], @values=[nil]>,
   @interpreted_value={"x"=>#<Nil_Construct:0x00000001072383b0>},
   @name="x">

should these constant collections, aka enums, be stored in the same way? or should they have their own construct. Probably its own construct if for no reason other than because checking this construct's type is much simpler this way.

How do I want the interpreting code to look? Here's an example:

Scope {
	VERSION: 0.0
	STATE: Enum_Construct(
		name = STATE
		constants = [
			Assignment_Expr(ABC = 42)
			Enum_Construct(name = XYZ, constants = [])
		]
	)
}

interpreting STATE.ABC
	#evaluate expr is Binary_Expr(
		left = STATE
		op = .
		right = ABC
	}

	left = get_from_scope expr.name(STATE)          # => Enum_Construct
	right = left.constants.where -> it == ABC       # => Assignment_Expr(ABC)

interpreting VERSION
	#evaluate expr is Identifier_Expr(VERSION)
	lookup = get_from_scope expr.string(VERSION)    # => 0.0

what about `STATE` by itself
	#evaluate expr is Identifier_Expr(STATE)
	lookup = get_from_scope expr.string             # => Enum_Construct

This looks like it would work. I originally thought an error should be returned when you call the enum construct without an accessor, but I want to be able to pass around the enum construct, so it needs to be accessible to be something that can be assigned.

