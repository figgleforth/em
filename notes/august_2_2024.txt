I'm still in the progress of updating Lexer. I'm having second thoughts about allowing symbols to be identifiers. That is complicating things quite a bit. But I think I can still have them by limiting their usage to operators only. For example:

	# { right -> }          #right          # right
	# { left, right -> }    left#right      left # right
	# { left -> }           left#           left #

This implies the removal of the `operator` keyword. And yes, I think it shouldn't be required because symbols are now by default operators. But I think it should be a reserved word anyway in case you want to declare alphabetic operators. That might look like:

	operator scream { right -> right.upcase }
	scream "hello"          "HELLO"

Going forward, symbol identifiers are operators and alphanumeric identifiers are regular old identifiers.

I'm also going to replace Symbol_Token, the current token for symbol identifiers, with Operator_Token. That would simplify preparsing for operators. With that change, these would be all the types of tokens generated by the Lexer:

	Operator_Token          (formerly Symbol_Token)
	Identifier_Token
	Keyword_Token
	Number_Token
	String_Token
	Delimiter_Token
	EOF_Token

A thought just occurred to me, I can no longer have identifiers that end with ? and !. But that is okay because I can make postfix ! anyway with operator overloading.

What if some madlad went crazy with operators? I'm not struggling with the below examples, but I've had half a day with it so I think anyone can do this well and fast after a short amount of time.

	asdf!@#$()
	asdf    !@#$       ()
	ident   operator   empty set

	!#$^abc!#^$!(1!@#%2)
	!#$^        abc     !#^$!       (    1       !@#%      2    )
	operator    ident   operator    set  number  operator  number

These are extreme examples so hopefully it won't be this bad. I really love being able to use ! and ? as part of identifiers in Ruby, and this is basically the same thing plus you can use other characters.

Stop wasting time writing ideas down. Start fixing the fucking shit!
