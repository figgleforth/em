=== Typical app directory

```
3rd/
everything_else.em
```

The root directory is for code specific to this project.
3rd/ is where external libraries live.

Runtime should load all global identifiers first (String, Set, etc), then /3rd. I think the builtin global identifiers could come from within the Runtime.

=== Directories as namespaces

The directory of the file is what determines its namespace.
```
3rd/
controllers/home.em    # Home {}
views/layout.em        # Layout {}
```

From within controllers/home.em, Home can be referenced by just Home or ./Home.
From anywhere else, it is Controllers.Home or ../Controllers.Home, ../Views.Layout

If a file is moved, we can tell the runtime to alias its old location as an acceptable namespace. I don't know what that syntax would look like, whether it's symbol(s) or a keyword. But you should be able to move ../controllers/home.em to ../cont/home.em, add an alias for ../controllers so that ../Controllers.Home is still acceptable for a class in .,/Cont.Home

=== Accessing code in other namespaces
``
3rd/
	external_lib.em
	again/external.em
controllers/home.em
view/layout.em
```

To access self us ./ with one dot. This behaves like self in Ruby.

To access files in the root scope, use ../ as a prefix (2 dots for project root). This behaves like :: in Ruby.
	../Controllers.Home
	../Views.Layout

To access 3rd folder scope, use .../ (3 dots for 3rd)
	.../External_Lib
	.../Again/External

I prefer ./ ../ .../ because it looks pleasant and is coherent. It might make searching the codebase for ./ a little bit of a pain since it'll pick that up inside ../ and .../ but you can just filter by exact characters.

=== Importing files/libraries

What if I want to use a 3rd library locally?

`Math = .../Math` to alias 3rd/Math to local Math.


===

It would also be interesting to allow specifying an entry point for the application. I think by default, runtime should sort files in the root (../) alphabetically and make the first file the entry point. You can circumvent that by _.em, since it will be at the top of the directory.

In the project root, I've renamed ./examples to ./example, to serve as the example application that you can build. I created the 3rd directory and added _.em to the root. Slight problem though, `Dir['./example/*.em'].sort` returns files with numbers before files prefixed with _. I can write a custom sorter, or manually check and evaluate _.em while rejecting _.em  in this directory lookup.

Anyway, I really like using _.em as a sort of "entry point".
